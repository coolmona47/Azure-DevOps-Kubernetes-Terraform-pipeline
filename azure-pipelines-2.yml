trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  # These should be defined securely in the pipeline variable group or UI
  client_id: $(client_id)
  client_secret: $(client_secret)
  ssh_public_key_path: $(publickey.secureFilePath)

steps:
  - checkout: self

  # âœ… Install Terraform
  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
    inputs:
      terraformVersion: '1.5.7'

  # ðŸ’¡ Optional: Verify terraform is installed
  - script: terraform version
    displayName: 'Check Terraform Version'

  - script: echo "Starting Terraform on Azure DevOps"
    displayName: 'Echo Start'

  # Download the SSH public key from secure files
  - task: DownloadSecureFile@1
    name: publickey
    inputs:
      secureFile: 'azure_rsa1.pub'

  # Terraform Init using Azure CLI
  - task: AzureCLI@2
    displayName: 'Terraform Init'
    inputs:
      azureSubscription: 'azure-resorce-manager-service-connection'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
      inlineScript: |
        # Initialize Terraform backend
        terraform init \
          -backend-config="resource_group_name=terraform-backend-rg" \
          -backend-config="storage_account_name=storageacctmohanxyz" \
          -backend-config="container_name=storageacctmohancontainer" \
          -backend-config="key=kubernetes-dev.tfstate"

  # Terraform Plan using Azure CLI
  - task: AzureCLI@2
    displayName: 'Terraform Plan'
    inputs:
      azureSubscription: 'azure-resorce-manager-service-connection'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
      inlineScript: |
        terraform plan \
          -var "client_id=$(client_id)" \
          -var "client_secret=$(client_secret)" \
          -var "ssh_public_key=$(publickey.secureFilePath)" \
          -out=tfplan

  # Terraform Apply using Azure CLI
  - task: AzureCLI@2
    displayName: 'Terraform Apply'
    inputs:
      azureSubscription: 'azure-resorce-manager-service-connection'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
      inlineScript: |
        terraform apply -auto-approve tfplan